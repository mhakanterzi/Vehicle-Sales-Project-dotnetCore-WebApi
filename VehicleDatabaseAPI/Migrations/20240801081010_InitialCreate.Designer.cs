// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleDatabaseAPI.Data;

#nullable disable

namespace VehicleDatabaseAPI.Migrations
{
    [DbContext(typeof(VehicleDbContext))]
    [Migration("20240801081010_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VehicleDatabaseAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("VehicleDatabaseAPI.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("VehicleDatabaseAPI.Models.ReceivedVehicle", b =>
                {
                    b.Property<decimal>("ReceivedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.Property<string>("VehicleID1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReceivedPrice", "CustomerID", "VehicleID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("VehicleID1");

                    b.ToTable("ReceivedVehicles");
                });

            modelBuilder.Entity("VehicleDatabaseAPI.Models.SoldVehicle", b =>
                {
                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.Property<string>("VehicleID1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SoldPrice", "CustomerID", "VehicleID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("VehicleID1");

                    b.ToTable("SoldVehicles");
                });

            modelBuilder.Entity("VehicleDatabaseAPI.Models.Vehicle", b =>
                {
                    b.Property<string>("VehicleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Models")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnSale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("VehicleDatabaseAPI.Models.VehicleCategory", b =>
                {
                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("VehicleID1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VehicleID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("VehicleID1");

                    b.ToTable("VehicleCategories");
                });

            modelBuilder.Entity("VehicleDatabaseAPI.Models.ReceivedVehicle", b =>
                {
                    b.HasOne("VehicleDatabaseAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleDatabaseAPI.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID1");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleDatabaseAPI.Models.SoldVehicle", b =>
                {
                    b.HasOne("VehicleDatabaseAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleDatabaseAPI.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID1");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleDatabaseAPI.Models.VehicleCategory", b =>
                {
                    b.HasOne("VehicleDatabaseAPI.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleDatabaseAPI.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID1");

                    b.Navigation("Category");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
